name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=5

    env:
      PYTHONPATH: ${{ github.workspace }}
      DB_HOST: localhost
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: expense_tracker_test
      DEFAULT_DB_NAME: postgres
      DEBUG: True
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/expense_tracker_test
      DEFAULT_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/postgres
      JWT_SECRET_KEY: secret
      JWT_ALGORITHM: HS256
      JWT_EXPIRE_IN: 600
      PYTHONUNBUFFERED: 1

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12

      - name: Install uv
        run: pip install uv

      - name: Cache uv dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-uv-

      - name: Install dependencies
        run: uv sync --dev

      - name: Wait for Postgres
        run: |
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "Waiting for Postgres..."
            sleep 2
          done

      - name: Initialize database
        run: |
          uv run python src/database/init_db.py
          uv run python src/database/create_db_tables.py

      - name: Run Ruff (lint & format check)
        run: |
          uv run ruff check .
          uv run ruff format --check .

      - name: Run tests with coverage
        run: |
          uv run pytest --maxfail=1 --disable-warnings -q --cov=src --cov-report=xml --cov-report=term-missing

      - name: Upload test and coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            .pytest_cache
            coverage.xml
